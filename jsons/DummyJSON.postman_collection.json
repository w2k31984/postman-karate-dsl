{
	"info": {
		"_postman_id": "55dbd751-6334-4498-b93e-4776c53312f4",
		"name": "DummyJSON",
		"description": "Complete practive API RestFull",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "8974838",
		"_collection_link": "https://galactic-rocket-7866.postman.co/workspace/GrupoPurdy~3367cc63-8ca3-4389-b7b0-6fd1de488771/collection/8974838-55dbd751-6334-4498-b93e-4776c53312f4?action=share&source=collection_link&creator=8974838"
	},
	"item": [
		{
			"name": "Auth",
			"item": [
				{
					"name": "Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Obteniendo el response del token\r",
									"const responseBody = pm.response.json();\r",
									"\r",
									"//Asignacion de la variable de coleccion\r",
									"pm.collectionVariables.set(\"token\", responseBody.accessToken)\r",
									"pm.vault.set(\"vault/token\", responseBody.accessToken)\r",
									"\r",
									"//Se asigna la variable de coleccion con la informacion del body accessToken \r",
									"//pm.collectionVariables.set(\"token\", responseBody.accessToken)\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									"pm.test(\"Response time is less than 500ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
									"});\r",
									"\r",
									"pm.test(\"Successful POST request\", function () {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([200,201, 202]);\r",
									"});\r",
									"\r",
									"//Validacion del response del body o payload.\r",
									"pm.test(\"Validation response body Login\", function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.id).to.eql(1);\r",
									"    pm.expect(jsonData.username).to.eql(\"emilys\");\r",
									"    pm.expect(jsonData.email).to.eql(\"emily.johnson@x.dummyjson.com\");\r",
									"    pm.expect(jsonData.firstName).to.eql(\"Emily\");\r",
									"    pm.expect(jsonData.lastName).to.eql(\"Johnson\");\r",
									"    pm.expect(jsonData.gender).to.eql(\"female\");\r",
									"    pm.expect(jsonData.accessToken.length).to.eql(360);\r",
									"    pm.expect(jsonData.refreshToken.length).to.eql(360);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"username\": \"emilys\",\r\n    \"password\": \"emilyspass\",\r\n    \"expiresInMins\": 30 //Esto es opcional por default son 60 minutos\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{mainURL}}/login",
							"host": [
								"{{mainURL}}"
							],
							"path": [
								"login"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Products",
			"item": [
				{
					"name": "GetAllProducts",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Fixed syntax and added a proper test description\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"//Tiempo de respuesta del endpoint\r",
									"pm.test(\"Response time is less than 500ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
									"});\r",
									"pm.test(\"Successful GET request\", function () {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 201, 202]);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{mainURL}}/products",
							"host": [
								"{{mainURL}}"
							],
							"path": [
								"products"
							]
						}
					},
					"response": []
				},
				{
					"name": "GetProduct",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Schema Validacion\r",
									"const schema = {\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"id\": {\r",
									"      \"type\": \"number\"\r",
									"    },\r",
									"    \"title\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"description\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"category\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"price\": {\r",
									"      \"type\": \"number\"\r",
									"    },\r",
									"    \"discountPercentage\": {\r",
									"      \"type\": \"number\"\r",
									"    },\r",
									"    \"rating\": {\r",
									"      \"type\": \"number\"\r",
									"    },\r",
									"    \"stock\": {\r",
									"      \"type\": \"integer\"\r",
									"    },\r",
									"    \"tags\": {\r",
									"      \"type\": \"array\",\r",
									"      \"items\": [\r",
									"        {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        {\r",
									"          \"type\": \"string\"\r",
									"        }\r",
									"      ]\r",
									"    },\r",
									"    \"brand\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"sku\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"weight\": {\r",
									"      \"type\": \"integer\"\r",
									"    },\r",
									"    \"dimensions\": {\r",
									"      \"type\": \"object\",\r",
									"      \"properties\": {\r",
									"        \"width\": {\r",
									"          \"type\": \"number\"\r",
									"        },\r",
									"        \"height\": {\r",
									"          \"type\": \"number\"\r",
									"        },\r",
									"        \"depth\": {\r",
									"          \"type\": \"number\"\r",
									"        }\r",
									"      },\r",
									"      \"required\": [\r",
									"        \"width\",\r",
									"        \"height\",\r",
									"        \"depth\"\r",
									"      ]\r",
									"    },\r",
									"    \"warrantyInformation\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"shippingInformation\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"availabilityStatus\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"reviews\": {\r",
									"      \"type\": \"array\",\r",
									"      \"items\": [\r",
									"        {\r",
									"          \"type\": \"object\",\r",
									"          \"properties\": {\r",
									"            \"rating\": {\r",
									"              \"type\": \"integer\"\r",
									"            },\r",
									"            \"comment\": {\r",
									"              \"type\": \"string\"\r",
									"            },\r",
									"            \"date\": {\r",
									"              \"type\": \"string\"\r",
									"            },\r",
									"            \"reviewerName\": {\r",
									"              \"type\": \"string\"\r",
									"            },\r",
									"            \"reviewerEmail\": {\r",
									"              \"type\": \"string\"\r",
									"            }\r",
									"          },\r",
									"          \"required\": [\r",
									"            \"rating\",\r",
									"            \"comment\",\r",
									"            \"date\",\r",
									"            \"reviewerName\",\r",
									"            \"reviewerEmail\"\r",
									"          ]\r",
									"        },\r",
									"        {\r",
									"          \"type\": \"object\",\r",
									"          \"properties\": {\r",
									"            \"rating\": {\r",
									"              \"type\": \"integer\"\r",
									"            },\r",
									"            \"comment\": {\r",
									"              \"type\": \"string\"\r",
									"            },\r",
									"            \"date\": {\r",
									"              \"type\": \"string\"\r",
									"            },\r",
									"            \"reviewerName\": {\r",
									"              \"type\": \"string\"\r",
									"            },\r",
									"            \"reviewerEmail\": {\r",
									"              \"type\": \"string\"\r",
									"            }\r",
									"          },\r",
									"          \"required\": [\r",
									"            \"rating\",\r",
									"            \"comment\",\r",
									"            \"date\",\r",
									"            \"reviewerName\",\r",
									"            \"reviewerEmail\"\r",
									"          ]\r",
									"        },\r",
									"        {\r",
									"          \"type\": \"object\",\r",
									"          \"properties\": {\r",
									"            \"rating\": {\r",
									"              \"type\": \"integer\"\r",
									"            },\r",
									"            \"comment\": {\r",
									"              \"type\": \"string\"\r",
									"            },\r",
									"            \"date\": {\r",
									"              \"type\": \"string\"\r",
									"            },\r",
									"            \"reviewerName\": {\r",
									"              \"type\": \"string\"\r",
									"            },\r",
									"            \"reviewerEmail\": {\r",
									"              \"type\": \"string\"\r",
									"            }\r",
									"          },\r",
									"          \"required\": [\r",
									"            \"rating\",\r",
									"            \"comment\",\r",
									"            \"date\",\r",
									"            \"reviewerName\",\r",
									"            \"reviewerEmail\"\r",
									"          ]\r",
									"        }\r",
									"      ]\r",
									"    },\r",
									"    \"returnPolicy\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"minimumOrderQuantity\": {\r",
									"      \"type\": \"integer\"\r",
									"    },\r",
									"    \"meta\": {\r",
									"      \"type\": \"object\",\r",
									"      \"properties\": {\r",
									"        \"createdAt\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"updatedAt\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"barcode\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"qrCode\": {\r",
									"          \"type\": \"string\"\r",
									"        }\r",
									"      },\r",
									"      \"required\": [\r",
									"        \"createdAt\",\r",
									"        \"updatedAt\",\r",
									"        \"barcode\",\r",
									"        \"qrCode\"\r",
									"      ]\r",
									"    },\r",
									"    \"images\": {\r",
									"      \"type\": \"array\",\r",
									"      \"items\": [\r",
									"        {\r",
									"          \"type\": \"string\"\r",
									"        }\r",
									"      ]\r",
									"    },\r",
									"    \"thumbnail\": {\r",
									"      \"type\": \"string\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"id\",\r",
									"    \"title\",\r",
									"    \"description\",\r",
									"    \"category\",\r",
									"    \"price\",\r",
									"    \"discountPercentage\",\r",
									"    \"rating\",\r",
									"    \"stock\",\r",
									"    \"tags\",\r",
									"    \"brand\",\r",
									"    \"sku\",\r",
									"    \"weight\",\r",
									"    \"dimensions\",\r",
									"    \"warrantyInformation\",\r",
									"    \"shippingInformation\",\r",
									"    \"availabilityStatus\",\r",
									"    \"reviews\",\r",
									"    \"returnPolicy\",\r",
									"    \"minimumOrderQuantity\",\r",
									"    \"meta\",\r",
									"    \"images\",\r",
									"    \"thumbnail\"\r",
									"  ]\r",
									"}\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Response time is less than 500ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
									"});\r",
									"\r",
									"//Validacion del response del body o payload.\r",
									"pm.test(\"Validation response body error message\", function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.id).to.eql(5);\r",
									"\r",
									"});\r",
									"\r",
									"// Test de schema validacion del endpoint\r",
									"pm.test(\"Schema validation\", () => {\r",
									"    pm.response.to.have.jsonSchema(schema); // nombre de la variable del esquema\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{mainURL}}/products/5",
							"host": [
								"{{mainURL}}"
							],
							"path": [
								"products",
								"5"
							]
						}
					},
					"response": []
				},
				{
					"name": "GetProductPhone",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Response time is less than 500ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{mainURL}}/products/search?q=phone",
							"host": [
								"{{mainURL}}"
							],
							"path": [
								"products",
								"search"
							],
							"query": [
								{
									"key": "q",
									"value": "phone"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "SortProducts",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Response time is less than 500ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{mainURL}}/products?sortBy=price&order=asc",
							"host": [
								"{{mainURL}}"
							],
							"path": [
								"products"
							],
							"query": [
								{
									"key": "sortBy",
									"value": "price"
								},
								{
									"key": "order",
									"value": "asc"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "DeleteProduct",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Response time is less than 500ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{mainURL}}/products/1",
							"host": [
								"{{mainURL}}"
							],
							"path": [
								"products",
								"1"
							]
						}
					},
					"response": []
				},
				{
					"name": "CreateProduct",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"pm.test(\"Response time is less than 500ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
									"});\r",
									"pm.test(\"Successful POST request\", function () {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([201, 202]);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"title\": \"Blass Academy\",\r\n    \"description\": \"Somos Blass Academy\",\r\n    \"category\": \"courses\",\r\n    \"price\": 3.99,\r\n    \"rating\": 4.95,\r\n    \"stock\": 30\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{mainURL}}/products/add",
							"host": [
								"{{mainURL}}"
							],
							"path": [
								"products",
								"add"
							]
						}
					},
					"response": []
				},
				{
					"name": "UpdateProduct",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"})\r",
									"\r",
									"pm.test(\"Response time is less than 500ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
									"});\r",
									"\r",
									"pm.test(\"Successful PUT request\", function () {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([200,201, 202]);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"title\": \"Blass Academy Editado\",\r\n    \"description\": \"Somos Blass Academy Editado\",\r\n    \"category\": \"courses Editado\",\r\n    \"price\": 9.99,\r\n    \"rating\": 5.0,\r\n    \"stock\": 25\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{mainURL}}/products/2",
							"host": [
								"{{mainURL}}"
							],
							"path": [
								"products",
								"2"
							]
						}
					},
					"response": []
				},
				{
					"name": "PartialUpdateProduct",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 500ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
									"});\r",
									"pm.test(\"Successful PATCH request\", function () {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([200,201, 202]);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"title\": \"Blass Academy Editado\",\r\n    \"description\": \"Somos Blass Academy Editado\"\r\n  \r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{mainURL}}/products/2",
							"host": [
								"{{mainURL}}"
							],
							"path": [
								"products",
								"2"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Users",
			"item": [
				{
					"name": "GetAllUsers",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 500ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
									"});\r",
									"pm.test(\"Successful GET request\", function () {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([200,201, 202]);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{mainURL}}/users",
							"host": [
								"{{mainURL}}"
							],
							"path": [
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "GetUser",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Schema validation\r",
									"const schema_user ={\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"id\": {\r",
									"      \"type\": \"integer\"\r",
									"    },\r",
									"    \"firstName\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"lastName\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"maidenName\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"age\": {\r",
									"      \"type\": \"integer\"\r",
									"    },\r",
									"    \"gender\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"email\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"phone\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"username\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"password\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"birthDate\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"image\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"bloodGroup\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"height\": {\r",
									"      \"type\": \"number\"\r",
									"    },\r",
									"    \"weight\": {\r",
									"      \"type\": \"number\"\r",
									"    },\r",
									"    \"eyeColor\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"hair\": {\r",
									"      \"type\": \"object\",\r",
									"      \"properties\": {\r",
									"        \"color\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"type\": {\r",
									"          \"type\": \"string\"\r",
									"        }\r",
									"      },\r",
									"      \"required\": [\r",
									"        \"color\",\r",
									"        \"type\"\r",
									"      ]\r",
									"    },\r",
									"    \"ip\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"address\": {\r",
									"      \"type\": \"object\",\r",
									"      \"properties\": {\r",
									"        \"address\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"city\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"state\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"stateCode\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"postalCode\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"coordinates\": {\r",
									"          \"type\": \"object\",\r",
									"          \"properties\": {\r",
									"            \"lat\": {\r",
									"              \"type\": \"number\"\r",
									"            },\r",
									"            \"lng\": {\r",
									"              \"type\": \"number\"\r",
									"            }\r",
									"          },\r",
									"          \"required\": [\r",
									"            \"lat\",\r",
									"            \"lng\"\r",
									"          ]\r",
									"        },\r",
									"        \"country\": {\r",
									"          \"type\": \"string\"\r",
									"        }\r",
									"      },\r",
									"      \"required\": [\r",
									"        \"address\",\r",
									"        \"city\",\r",
									"        \"state\",\r",
									"        \"stateCode\",\r",
									"        \"postalCode\",\r",
									"        \"coordinates\",\r",
									"        \"country\"\r",
									"      ]\r",
									"    },\r",
									"    \"macAddress\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"university\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"bank\": {\r",
									"      \"type\": \"object\",\r",
									"      \"properties\": {\r",
									"        \"cardExpire\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"cardNumber\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"cardType\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"currency\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"iban\": {\r",
									"          \"type\": \"string\"\r",
									"        }\r",
									"      },\r",
									"      \"required\": [\r",
									"        \"cardExpire\",\r",
									"        \"cardNumber\",\r",
									"        \"cardType\",\r",
									"        \"currency\",\r",
									"        \"iban\"\r",
									"      ]\r",
									"    },\r",
									"    \"company\": {\r",
									"      \"type\": \"object\",\r",
									"      \"properties\": {\r",
									"        \"department\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"name\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"title\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"address\": {\r",
									"          \"type\": \"object\",\r",
									"          \"properties\": {\r",
									"            \"address\": {\r",
									"              \"type\": \"string\"\r",
									"            },\r",
									"            \"city\": {\r",
									"              \"type\": \"string\"\r",
									"            },\r",
									"            \"state\": {\r",
									"              \"type\": \"string\"\r",
									"            },\r",
									"            \"stateCode\": {\r",
									"              \"type\": \"string\"\r",
									"            },\r",
									"            \"postalCode\": {\r",
									"              \"type\": \"string\"\r",
									"            },\r",
									"            \"coordinates\": {\r",
									"              \"type\": \"object\",\r",
									"              \"properties\": {\r",
									"                \"lat\": {\r",
									"                  \"type\": \"number\"\r",
									"                },\r",
									"                \"lng\": {\r",
									"                  \"type\": \"number\"\r",
									"                }\r",
									"              },\r",
									"              \"required\": [\r",
									"                \"lat\",\r",
									"                \"lng\"\r",
									"              ]\r",
									"            },\r",
									"            \"country\": {\r",
									"              \"type\": \"string\"\r",
									"            }\r",
									"          },\r",
									"          \"required\": [\r",
									"            \"address\",\r",
									"            \"city\",\r",
									"            \"state\",\r",
									"            \"stateCode\",\r",
									"            \"postalCode\",\r",
									"            \"coordinates\",\r",
									"            \"country\"\r",
									"          ]\r",
									"        }\r",
									"      },\r",
									"      \"required\": [\r",
									"        \"department\",\r",
									"        \"name\",\r",
									"        \"title\",\r",
									"        \"address\"\r",
									"      ]\r",
									"    },\r",
									"    \"ein\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"ssn\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"userAgent\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"crypto\": {\r",
									"      \"type\": \"object\",\r",
									"      \"properties\": {\r",
									"        \"coin\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"wallet\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"network\": {\r",
									"          \"type\": \"string\"\r",
									"        }\r",
									"      },\r",
									"      \"required\": [\r",
									"        \"coin\",\r",
									"        \"wallet\",\r",
									"        \"network\"\r",
									"      ]\r",
									"    },\r",
									"    \"role\": {\r",
									"      \"type\": \"string\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"id\",\r",
									"    \"firstName\",\r",
									"    \"lastName\",\r",
									"    \"maidenName\",\r",
									"    \"age\",\r",
									"    \"gender\",\r",
									"    \"email\",\r",
									"    \"phone\",\r",
									"    \"username\",\r",
									"    \"password\",\r",
									"    \"birthDate\",\r",
									"    \"image\",\r",
									"    \"bloodGroup\",\r",
									"    \"height\",\r",
									"    \"weight\",\r",
									"    \"eyeColor\",\r",
									"    \"hair\",\r",
									"    \"ip\",\r",
									"    \"address\",\r",
									"    \"macAddress\",\r",
									"    \"university\",\r",
									"    \"bank\",\r",
									"    \"company\",\r",
									"    \"ein\",\r",
									"    \"ssn\",\r",
									"    \"userAgent\",\r",
									"    \"crypto\",\r",
									"    \"role\"\r",
									"  ]\r",
									"}\r",
									"\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 500ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
									"});\r",
									"pm.test(\"Successful GET request\", function () {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([200,201, 202]);\r",
									"});\r",
									" //Validacion del response del body o payload.\r",
									"    pm.test(\"Validation response body User\", function () {\r",
									"        const jsonData = pm.response.json();\r",
									"        pm.expect(jsonData.id).to.eql(5);\r",
									"        pm.expect(jsonData.firstName).to.eql(\"Emma\");\r",
									"        pm.expect(jsonData.lastName).to.eql(\"Miller\");\r",
									"        pm.expect(jsonData.age).to.eql(30);\r",
									"        pm.expect(jsonData.bank.cardType).to.eql(\"American Express\");\r",
									"        pm.expect(jsonData.company.address.state).to.eql(\"Idaho\");\r",
									"    });\r",
									"\r",
									"    // Test de schema validacion del endpoint\r",
									"pm.test(\"Schema validation\", () => {\r",
									"    pm.response.to.have.jsonSchema(schema_user); // nombre de la variable del esquema\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{mainURL}}/users/5",
							"host": [
								"{{mainURL}}"
							],
							"path": [
								"users",
								"5"
							]
						}
					},
					"response": []
				},
				{
					"name": "DeleteUser",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 500ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
									"});\r",
									"pm.test(\"Successful DELETE request\", function () {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([200,201, 202]);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{mainURL}}/users/2",
							"host": [
								"{{mainURL}}"
							],
							"path": [
								"users",
								"2"
							]
						}
					},
					"response": []
				},
				{
					"name": "SortUsers",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 500ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
									"});\r",
									"pm.test(\"Successful GET request\", function () {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([200,201, 202]);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{mainURL}}/users?sortBy=age&order=desc",
							"host": [
								"{{mainURL}}"
							],
							"path": [
								"users"
							],
							"query": [
								{
									"key": "sortBy",
									"value": "age"
								},
								{
									"key": "order",
									"value": "desc"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "FilterUsers",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 500ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
									"});\r",
									"pm.test(\"Successful GET request\", function () {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([200,201, 202]);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{mainURL}}/users/filter?key=address.city&value=Phoenix",
							"host": [
								"{{mainURL}}"
							],
							"path": [
								"users",
								"filter"
							],
							"query": [
								{
									"key": "key",
									"value": "address.city"
								},
								{
									"key": "value",
									"value": "Phoenix"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "CreateUser",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 500ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
									"});\r",
									"pm.test(\"Successful POST request\", function () {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([200,201, 202]);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"firstName\": \"Blass\",\r\n    \"lastName\": \"Academy\",\r\n    \"age\": 35,\r\n    \"gender\": \"male\",\r\n    \"email\": \"blass.academy@blassacademy.com\",\r\n    \"phone\": \"+91 123456\",\r\n    \"role\": \"courses\",\r\n    \"address\": {\r\n        \"address\": \"607 Fourth Street\",\r\n        \"city\": \"Blass City\",\r\n        \"state\": \"Academy City\",\r\n        \"country\": \"United Blass\",\r\n        \"coordinates\": {\r\n            \"lat\": 0.505589,\r\n            \"lng\": 157.43281\r\n        }\r\n    },\r\n    \"company\": {\r\n        \"department\": \"Blass Reources\",\r\n        \"name\": \"Blass - Name\",\r\n        \"title\": \"Test Automation Engineer\"\r\n    }\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{mainURL}}/users/add",
							"host": [
								"{{mainURL}}"
							],
							"path": [
								"users",
								"add"
							]
						}
					},
					"response": []
				},
				{
					"name": "UpdateUser",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 500ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
									"});\r",
									"pm.test(\"Successful PUT request\", function () {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([200,201, 202]);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"firstName\": \"Blass Editado\",\r\n    \"lastName\": \"Academy Editado\",\r\n    \"age\": 50,\r\n    \"gender\": \"male\",\r\n    \"email\": \"blass.academy@blassacademy.com\",\r\n    \"phone\": \"+91 123456\",\r\n    \"role\": \"courses editado\",\r\n    \"address\": {\r\n        \"address\": \"607 Fourth Street\",\r\n        \"city\": \"Blass City\",\r\n        \"state\": \"Academy City\",\r\n        \"country\": \"United Blass\",\r\n        \"coordinates\": {\r\n            \"lat\": 0.505589,\r\n            \"lng\": 157.43281\r\n        }\r\n    },\r\n    \"company\": {\r\n        \"department\": \"Blass Reources\",\r\n        \"name\": \"Blass - Name\",\r\n        \"title\": \"Test Automation Engineer\"\r\n    }\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{mainURL}}/users/5",
							"host": [
								"{{mainURL}}"
							],
							"path": [
								"users",
								"5"
							]
						}
					},
					"response": []
				},
				{
					"name": "PartialUpdateUser",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 500ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
									"});\r",
									"pm.test(\"Successful PATCH request\", function () {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([200,201, 202]);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"firstName\": \"Blass Editado 2\",\r\n    \"lastName\": \"Academy Editado 2\",\r\n    \"age\": 88\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{mainURL}}/users/5",
							"host": [
								"{{mainURL}}"
							],
							"path": [
								"users",
								"5"
							]
						}
					},
					"response": []
				},
				{
					"name": "GetSearchUser",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 500ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
									"});\r",
									"pm.test(\"Successful GET request\", function () {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([200,201, 202]);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{mainURL}}/users/search?q=John",
							"host": [
								"{{mainURL}}"
							],
							"path": [
								"users",
								"search"
							],
							"query": [
								{
									"key": "q",
									"value": "John"
								}
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"auth": {
		"type": "oauth2",
		"oauth2": [
			{
				"key": "addTokenTo",
				"value": "header",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "mainURL",
			"value": "https://dummyjson.com/auth",
			"type": "string"
		},
		{
			"key": "token",
			"value": ""
		}
	]
}